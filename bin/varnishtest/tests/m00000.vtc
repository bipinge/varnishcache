varnishtest "Test std, vtc & debug vmod"

server s1 {
	rxreq
	expect req.http.encrypted == "ROT52"
	txresp -hdr "foo: bAr" -hdr "bar: fOo" -bodylen 4
} -start

varnish v1 -vcl+backend {
	import std;
	import debug;
	import vtc;

	sub vcl_init {
		new obj = debug.obj();
	}

	sub vcl_recv {
		debug.rot52(req);
	}

	sub vcl_deliver {
		set resp.http.foo = std.toupper(resp.http.foo);
		set resp.http.bar = std.tolower(resp.http.bar);
		set resp.http.who = debug.author(mithrandir);
		set resp.http.really = debug.author();
		set resp.http.what = vtc.typesize("dfijlopsz");
		set resp.http.not = vtc.typesize("*");
		debug.test_priv_call();
		debug.test_priv_vcl();
		obj.test_priv_call();
		obj.test_priv_vcl();
		std.log("VCL" + " initiated " + "log");
		std.syslog(8 + 7, "Somebody runs varnishtest");
		debug.rot52(resp);
		# INT a=$Undef, INT b=1, BOOL c=$Undef, INT d=$Undef
		set resp.http.m0 = debug.argmask();
		set resp.http.ma = debug.argmask(a=0);
		set resp.http.mc = debug.argmask(c=false);
		set resp.http.md = debug.argmask(d=42);
		set resp.http.mac = debug.argmask(c=false, a=1);
		set resp.http.mad = debug.argmask(d=4711, a=1);
	}
} -start

client c1 {
	txreq -url "/bar"
	rxresp
	expect resp.status == 200
	expect resp.bodylen == "4"
	expect resp.http.foo == "BAR"
	expect resp.http.bar == "foo"
	expect resp.http.who == "Tollef"
	expect resp.http.really == "Poul-Henning"
	expect resp.http.encrypted == "ROT52"
	expect resp.http.what >= 16
	expect resp.http.not == -1
	expect resp.http.m0 == ""
	expect resp.http.ma == "a"
	expect resp.http.mc == "c"
	expect resp.http.md == "d"
	expect resp.http.mac == "ac"
	expect resp.http.mad == "ad"
} -run

logexpect l1 -v v1 -g raw -d 1 {
	expect * 1001 VCL_call		{^DELIVER}
	expect 0 =    RespUnset	{^foo: bAr}
	expect 0 =    RespHeader	{^foo: BAR}
	expect 0 =    RespUnset	{^bar: fOo}
	expect 0 =    RespHeader	{^bar: foo}
	expect 0 =    RespHeader	{^who: Tollef}
	expect 0 =    RespHeader	{^really: Poul-Henning}
	expect 0 =    RespHeader	{^what: [1-9][0-9]}
	expect 0 =    RespHeader	{^not: -1}
	expect 0 =    VCL_Log		{^VCL initiated log}
	expect 0 =    RespHeader	{^Encrypted: ROT52}
	expect 6 =    VCL_return	{^deliver}
} -start

logexpect l1 -wait

varnish v1 -errvcl {Wrong enum value.  Expected one of:} {
	import debug;
	sub vcl_deliver {
		set resp.http.who = debug.author(ENUM);
	}
}

varnish v1 -errvcl {Wrong enum value.  Expected one of:} {
	import debug;
	sub vcl_deliver {
		set resp.http.who = debug.author(slink);
	}
}

varnish v1 -errvcl {Expression has type STRING, expected REAL} {
	import std;
	sub vcl_deliver {
		set resp.http.who = std.random("foo", "bar");
	}
}
