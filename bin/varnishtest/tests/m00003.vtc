varnishtest "Test vmod_path param"

feature topbuild

server s1 {
	rxreq
	txresp
} -start

varnish v1 -arg "-pvmod_path=${topbuild}/lib/libvmod_std/.libs/" \
    -vcl+backend {
	import std;
} -start

varnish v1 -cliok "param.set vmod_path /nonexistent"

varnish v1 -errvcl {Could not find VMOD std} {
	import std;
}

varnish v1 -cliok "param.set vmod_path ${topbuild}/lib/libvmod_std/.libs/"

varnish v1 -vcl+backend {
	import std;
}

varnish v1 -cliok "param.set vmod_path ${tmpdir}"

shell "true > ${tmpdir}/libvmod_wrong.so"

varnish v1 -errvcl {Could not open VMOD wrong} {
	import wrong;
}

shell "cp ${topbuild}/lib/libvmod_debug/.libs/libvmod_debug.so ${tmpdir}/libvmod_wrong.so"

varnish v1 -errvcl {Malformed VMOD wrong} {
	import wrong;
}

varnish v1 -errvcl {Incompatible VMOD wrong0} {
	import wrong0 from "${tmpdir}/libvmod_wrong.so";
}

varnish v1 -errvcl {Incompatible VMOD wrong1} {
	import wrong1 from "${tmpdir}/libvmod_wrong.so";
}

varnish v1 -errvcl {Mangled VMOD wrong2} {
	import wrong2 from "${tmpdir}/libvmod_wrong.so";
}

varnish v1 -errvcl {Wrong file for VMOD wrong3} {
	import wrong3 from "${tmpdir}/libvmod_wrong.so";
}

varnish v1 -clierr 106 "param.set vmod_path /absolute/path:relative/path"
varnish v1 -cliexpect "Invalid path component at: 'relative/path'" \
	"param.set vmod_path /absolute/path:relative/path"

varnish v1 -cliexpect "Invalid path component at: ':/previous/empty'" \
	"param.set vmod_path :/previous/empty"

varnish v1 -cliexpect "Invalid path component at: ':/previous/empty'" \
	"param.set vmod_path /next/empty::/previous/empty"

# we let this one get a free pass
varnish v1 -cliok "param.set vmod_path /last/empty:"

varnish v1 -cliexpect "Invalid path component at: ':'" \
	"param.set vmod_path /next/empty::"
