varnishtest "Fetch beresp despite failure to send bereq"

barrier b1 cond 2
barrier b2 cond 2

# bo->send_failed

server s1 {
	rxreqhdrs
	txresp -status 400 -body "Invalid request"
} -start

varnish v1 -vcl+backend {
	sub vcl_backend_fetch {
		if (bereq.http.ignore == "bgfetch") {
			return (abandon);
		}
		return (fetch); # don't unset bereq.body
	}
} -start

logexpect l1 -v v1 -g raw -i BackendClose {
	expect 0 1002 BackendClose "s1 close"
	expect 1 1007 BackendClose "s1 close"
} -start

client c1 {
	txreq -method POST -hdr "Transfer-Encoding: chunked"
	chunkedlen 100
	barrier b1 sync
	non_fatal
	chunkedlen 100
	chunkedlen 0
	fatal
	rxresp
	expect resp.status == 400
	expect resp.body == "Invalid request"
} -start

server s1 -wait
barrier b1 sync
client c1 -wait

# bo->send_failed && 304

server s1 {
	rxreq
	txresp -hdr "Cache-Control: public, max-age=1" -hdr {Etag: "abc"} \
	    -hdr "version: original" -body can-revalidate

	rxreqhdrs
	expect req.http.if-none-match == {"abc"}
	txresp -status 304 -hdr "Cache-Control: public" -hdr {Etag: "abc"} \
	    -hdr "version: refreshed"
} -start

client c2 {
	txreq -hdr "Transfer-Encoding: chunked"
	chunkedlen 100
	chunkedlen 100
	chunkedlen 0
	rxresp
	expect resp.http.etag == {"abc"}
	expect resp.http.version == original
	expect resp.body == can-revalidate

	delay 2

	# bereq.send_failed during grace
	txreq -hdr "Transfer-Encoding: chunked"
	chunkedlen 100
	barrier b2 sync
	non_fatal
	chunkedlen 100
	chunkedlen 0
	fatal
	rxresp
	expect resp.status == 200
	expect resp.http.etag == {"abc"}
	expect resp.http.version == original
	expect resp.body == can-revalidate
} -start

server s1 -wait
barrier b2 sync
client c2 -wait

client c3 {
	txreq -hdr "Transfer-Encoding: chunked" -hdr "ignore: bgfetch"
	chunkedlen 100
	chunkedlen 100
	chunkedlen 0
	rxresp
	expect resp.http.etag == {"abc"}
	expect resp.http.version == original
	expect resp.body == can-revalidate
} -run

logexpect l1 -wait
