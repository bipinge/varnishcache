varnishtest "VCL compiler coverage test: vcc_parse.c & vcc_expr.c"

varnish v1 -cliok "param.set vcc_allow_inline_c true" -vcl {
	backend b { .host = "127.0.0.1"; }
	C{
	#include <stdio.h>
	}C
}

varnish v1 -errvcl {Found: '0' at} { 0; }

# The next test issues a quite confusing error message:
#   Expected an action, 'if', '{' or '}'\n
#   ('Default' Line 42 Pos 1)\n
#   sub vcl_recv {\n
#   ###-----------\n
#   \n
# It's actually complaining about the first token in
# the default.vcl which is appended after the proffered
# VCLs tokenstream.
# XXX: A better error message would be desirable

varnish v1 -errvcl {Expected an action, 'if', } " sub vcl_recv { { } { "

server s1 {
	rxreq
	txresp
} -start

varnish v1 -vcl+backend {
	sub vcl_backend_response {
		set beresp.ttl = 1w;
		set beresp.http.ttl1a = beresp.ttl;
		set beresp.ttl *= 1.5;
		set beresp.http.ttl1b = beresp.ttl;
		set beresp.ttl = 1.5 s * 2.5;
		set beresp.http.ttl1c = beresp.ttl;
		set beresp.ttl = 1.5 s / 2.5;
		set beresp.http.ttl1d = beresp.ttl;
		set beresp.ttl = 1.5h + 1.5s;
		set beresp.http.ttl1e = beresp.ttl;
		set beresp.ttl = 1.5h - 1.5s;
		set beresp.http.ttl1f = beresp.ttl;

		# real->duration cast
		set beresp.ttl = 7.0 * 24.0 * 3600.0;
		set beresp.http.ttl2a = beresp.ttl;
		set beresp.ttl *= 1.5;
		set beresp.http.ttl2b = beresp.ttl;
		set beresp.ttl = 1.5 * 2.5;
		set beresp.http.ttl2c = beresp.ttl;
		set beresp.ttl = 1.5 / 2.5;
		set beresp.http.ttl2d = beresp.ttl;
		set beresp.ttl = 1.5 * 3600 + 1.5;
		set beresp.http.ttl2e = beresp.ttl;
		set beresp.ttl = 1.5 * 3600 - 1.5;
		set beresp.http.ttl2f = beresp.ttl;

		# int->duration cast
		set beresp.ttl = 7 * 24 *3600;
		set beresp.http.ttl3a = beresp.ttl;
		set beresp.ttl *= 1.5;
		set beresp.http.ttl3b = beresp.ttl;
		set beresp.ttl = 2 * 2;
		set beresp.http.ttl3c = beresp.ttl;
		set beresp.ttl = 5 / 2;
		set beresp.http.ttl3d = beresp.ttl;
		set beresp.ttl = 90 + 2;
		set beresp.http.ttl3e = beresp.ttl;
		set beresp.ttl = 90 - 2;
		set beresp.http.ttl3f = beresp.ttl;
	}
} -start

client c1 {
	txreq
	rxresp
	expect resp.status == 200

	expect resp.http.ttl1a == 604800.000
	expect resp.http.ttl1b == 907200.000
	expect resp.http.ttl1c == 3.750
	expect resp.http.ttl1d == 0.600
	expect resp.http.ttl1e == 5401.500
	expect resp.http.ttl1f == 5398.500

	expect resp.http.ttl2a == 604800.000
	expect resp.http.ttl2b == 907200.000
	expect resp.http.ttl2c == 3.750
	expect resp.http.ttl2d == 0.600
	expect resp.http.ttl2e == 5401.500
	expect resp.http.ttl2f == 5398.500

	expect resp.http.ttl3a == 604800.000
	expect resp.http.ttl3b == 907200.000
	expect resp.http.ttl3c == 4.000
	expect resp.http.ttl3d == 2.000
	expect resp.http.ttl3e == 92.000
	expect resp.http.ttl3f == 88.000

} -run


varnish v1 -errvcl {Comparison of different types: INT '!=' STRING} {
	sub vcl_recv {
		if (!req.restarts != req.url) {
			set req.http.foo = "foo";
		}

	}
}

varnish v1 -errvcl {Symbol not found: 'vcl_recv' (expected type STRING_LIST)} {
	sub vcl_recv {
		set req.http.foo = vcl_recv;
	}
}

# XXX: not obvious if this actually fails for the desired reason ?
varnish v1 -errvcl {Unknown token '-' when looking for DURATION} {
	sub vcl_recv {
		if (req.ttl < -3s || req.ttl) {
			set req.http.foo = vcl_recv;
		}
	}
}

varnish v1 -errvcl {Operator * not possible on type STRING.} {
	sub vcl_recv {
		set req.http.foo = "bla" * "foo";
	}
}

varnish v1 -errvcl {DURATION + INT not possible.} {
	sub vcl_backend_response {
		set req.ttl = req.ttl + beresp.status;
	}
}

varnish v1 -errvcl {BOOL + BOOL not possible.} {
	sub vcl_backend_response {
		if (beresp.do_gzip + beresp.do_gunzip) {
		}
	}
}

varnish v1 -vcl {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = "foo" + "bar";
		set req.http.foo = "foo" + 1;
		set req.http.foo = "foo" + 1.5;
		set req.http.foo = "foo" + now;

		set req.http.foo = now + 1s;
		set req.http.foo = now - 1s;

		set req.http.foo = now - now;

		set req.http.foo = 1 + 1;
		set req.http.foo = 1 - 1;
		set req.http.foo = 3 * 2;
		set req.http.foo = 3 / 2;

		set req.http.foo = 3.6 + 1.4;
		set req.http.foo = 3.6 - 1.4;
		set req.http.foo = 3.6 * 1.4;
		set req.http.foo = 3.6 / 1.4;

		set req.http.foo = 1.0 + 1;
		set req.http.foo = 1.0 - 1;
		set req.http.foo = 3.0 * 2;
		set req.http.foo = 3.0 / 2;

		set req.http.foo = req.http.foo + "bar" ~ "bar";
		set req.http.foo = req.http.foo + "bar" !~ "bar";

		set req.ttl = 1s;

		if (req.ttl) { }
		if (!req.ttl) { }

		if (1) { }
	}
}

# XXX: not the most clear error message
varnish v1 -errvcl {STRING - STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = "foo" - "bar";
	}
}

varnish v1 -errvcl {TIME + STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = now + "foo";
	}
}

varnish v1 -errvcl {TIME + TIME not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = now + now;
	}
}

varnish v1 -errvcl {INT + STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		set beresp.status = 1 + "foo";
	}
}

varnish v1 -errvcl {INT + TIME not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		set beresp.status = 1 + now;
	}
}

varnish v1 -errvcl {DURATION + TIME not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = 1s + now;
	}
}

varnish v1 -errvcl {DURATION + STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = 1s + "foo";
	}
}

varnish v1 -vcl {
	backend b { .host = "127.0.0.1"; }
	sub vcl_miss {
		if (!req.url) {
		}
	}
}

varnish v1 -errvcl {Name of function, 'foo-bar', contains illegal character '-'} {
	backend b { .host = "127.0.0.1"; }
	sub foo-bar {
	}
	sub vcl_recv {
		call foo-bar;
	}
}

varnish v1 -errvcl {VCL sub's named 'vcl*' are reserved names.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_bar {
	}
	sub vcl_recv {
		call vcl_bar;
	}
}

varnish v1 -errvcl {Function returns VOID} {
	import debug;
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = debug.sleep(1m);
	}
}

varnish v1 -errvcl {'beresp.status': Not available in method 'vcl_recv'.} {
	backend b { .host = "127.0.0.1"; }

	sub vcl_recv {
		set req.http.foo = 100 + beresp.status;
	}
}

varnish v1 -errvcl {Name of ACL, 'foo-bar', contains illegal character '-'} {
	backend b { .host = "127.0.0.1"; }
	acl foo-bar {
	}
	sub vcl_recv {
		if (client.ip ~ foo.bar) {
		}
	}
}

varnish v1 -errvcl {Expected 'from path ...'} {
	import std to;
}

varnish v1 -errvcl {INT * BLOB not possible.} {
	import debug;
	backend b { .host = "127.0.0.1"; }
	sub vcl_deliver {
		set resp.status = 100 * debug.str2blob("a");
	}
}
