varnishtest "Hit-for-miss and waitinglist rushing"

# Barrier to make sure that s1 is run first
barrier b1 cond 2

# Barrier to make sure that all requests are on waitinglist before
# HSH_Unbusy is called
barrier b2 cond 2

# Barrier to control that all backends are reached before any request
# finishes. This tests that waitinglists are rushed before
# HSH_DerefObjCore().
barrier b3 cond 6

server s1 {
	rxreq
	barrier b1 sync
	barrier b2 sync
	txresp -nolen -hdr "Transfer-Encoding: chunked"
	chunkedlen 10
	barrier b3 sync
	chunkedlen 10
	chunkedlen 0
} -start

server s2 {
	rxreq
	txresp -nolen -hdr "Transfer-Encoding: chunked"
	chunkedlen 10
	barrier b3 sync
	chunkedlen 10
	chunkedlen 0
} -start

server s3 {
	rxreq
	txresp -nolen -hdr "Transfer-Encoding: chunked"
	chunkedlen 10
	barrier b3 sync
	chunkedlen 10
	chunkedlen 0
} -start

server s4 {
	rxreq
	txresp -nolen -hdr "Transfer-Encoding: chunked"
	chunkedlen 10
	barrier b3 sync
	chunkedlen 10
	chunkedlen 0
} -start

server s5 {
	rxreq
	txresp -nolen -hdr "Transfer-Encoding: chunked"
	chunkedlen 10
	barrier b3 sync
	chunkedlen 10
	chunkedlen 0
} -start

server s6 {
	rxreq
	txresp -nolen -hdr "Transfer-Encoding: chunked"
	chunkedlen 10
	barrier b3 sync
	chunkedlen 10
	chunkedlen 0
} -start

varnish v1 -cliok "param.set thread_pools 1"
varnish v1 -cliok "param.set rush_exponent 2"
varnish v1 -cliok "param.set debug +syncvsl,+waitinglist"
varnish v1 -vcl+backend {
	sub vcl_backend_fetch {
		if (bereq.http.user-agent == "c1") {
			set bereq.backend = s1;
		} else if (bereq.http.user-agent == "c2") {
			set bereq.backend = s2;
		} else if (bereq.http.user-agent == "c3") {
			set bereq.backend = s3;
		} else if (bereq.http.user-agent == "c4") {
			set bereq.backend = s4;
		} else if (bereq.http.user-agent == "c5") {
			set bereq.backend = s5;
		} else if (bereq.http.user-agent == "c6") {
			set bereq.backend = s6;
		}
	}
	sub vcl_backend_response {
		set beresp.uncacheable = true;
	}
} -start

client c1 {
	txreq
	rxresp
} -start

# This makes sure that c1->s1 is done first
barrier b1 sync

# This will ensure that c{2..6} enter c1's waiting list in order.
logexpect l2 -v v1 -g raw {
	expect * * ReqHeader	"User-Agent: c2"
	expect * = Debug	"on waiting list"
} -start
logexpect l3 -v v1 -g raw {
	expect * * ReqHeader	"User-Agent: c3"
	expect * = Debug	"on waiting list"
} -start
logexpect l4 -v v1 -g raw {
	expect * * ReqHeader	"User-Agent: c4"
	expect * = Debug	"on waiting list"
} -start
logexpect l5 -v v1 -g raw {
	expect * * ReqHeader	"User-Agent: c5"
	expect * = Debug	"on waiting list"
} -start
logexpect l6 -v v1 -g raw {
	expect * * ReqHeader	"User-Agent: c6"
	expect * = Debug	"on waiting list"
} -start

client c2 {
	txreq
	rxresp
} -start

logexpect l2 -wait

client c3 {
	txreq
	rxresp
} -start

logexpect l3 -wait

client c4 {
	txreq
	rxresp
} -start

logexpect l4 -wait

client c5 {
	txreq
	rxresp
} -start

logexpect l5 -wait

client c6 {
	txreq
	rxresp
} -start

logexpect l6 -wait

varnish v1 -vsl_catchup
varnish v1 -expect busy_sleep == 5

# Open up the response headers from s1, and as a result HSH_Unbusy
barrier b2 sync

client c1 -wait
client c2 -wait
client c3 -wait
client c4 -wait
client c5 -wait
client c6 -wait

varnish v1 -vsl_catchup

# Check the effect of rush_exponent=2, with limited VXID guarantees.

logexpect l1 -v v1 -g raw -d 1 -q "vxid != 0" -i Debug {
	expect * 1002	Debug "waiting list rush for req 1004"
	expect 0 =	Debug "waiting list rush for req 1006"

	# triggered by 1004 or 1006
	expect * *	Debug "waiting list rush for req 1008"
	expect 0 =	Debug "waiting list rush for req 1010"

	# trigerred by any VXID except 1002
	expect * *	Debug "waiting list rush for req 1012"
} -run
